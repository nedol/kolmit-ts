import { WriteTranslate, ReadSpeech } from '$lib/server/db.ts'; //src\lib\server\server.db.ts
import md5 from 'md5'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ md5
import { HttpsProxyAgent } from 'https-proxy-agent';
import translatex from 'google-translate-api-x';
import { translate } from 'deeplx';
import { query } from '@ifyour/deeplx';

// Define supported languages
const langs = [
  "bg", "cs", "da", "de", "el", "en", "es", "et", "fi", "fr", "hu", "id", "it", "ja", "ko", "lt", "lv", "nb", "nl", "pl", "pt", "ro", "ru", "sk", "sl", "sv", "zh"
];

// Map to track pending translations (caching)
const pendingTranslations = new Map<string, Promise<string>>(); 

async function deeplx_query(text, to, from) { 
  
  // üîπ –û—Ç–ª–∞–¥–∫–∞: —á—Ç–æ –±—ã–ª–æ –î–û –∏ –ü–û–°–õ–ï –∑–∞–º–µ–Ω—ã
  // console.log("Before protection:", text);
  text = protectQuotedText(text);
  // console.log("After protection:", text);

  const params = {
    "text": text,
    "source_lang": from,
    "target_lang": to,
    "preserve_formatting": 1
  };

  // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ API
  console.log("Query params:", params);

  const res = await query(params);
  res.data = revertProtectedText(res.data);
  return res.data;
}

function preserveQuotedText(str) {
  // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
  const regex = /(['"])(.*?)\1/g;
  
  // –ú–∞—Å—Å–∏–≤ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–≤—ã—á–∫–∞—Ö
  let quotedTexts = [];
  
  // –ò—â–µ–º –≤—Å–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ –∫–∞–≤—ã—á–∫–∞—Ö –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Ö
  str = str.replace(regex, (match, quote, text) => {
      quotedTexts.push(text);
      return `${quote}__@__${quote}`; // –ó–∞–º–µ–Ω—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –Ω–∞ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
  });

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π –∏ –º–∞—Å—Å–∏–≤–æ–º –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
  return {
      modifiedString: str,
      quotedTexts: quotedTexts
  };
}

function restoreQuotedText(modifiedString, quotedTexts) {
  return modifiedString.replace(/__@__/g, () => {
      return quotedTexts.shift(); // –í—Å—Ç–∞–≤–ª—è–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç –æ–±—Ä–∞—Ç–Ω–æ
  });
}


// Translation function
// Translation function with optimizations
export async function Translate(
  text: string,
  from: string,
  to: string,
  quiz: string
): Promise<string> {
  if (!text?.trim()) return '';

  // Pre-process text once
  const processedText = text.replace(/\r\n/g, ' ');
  const sentences = processedText.split(/(?<=[.!?])\s+/).filter(s => s.trim() && s !== '"');
  const translatedChunks: string[] = [];

  // Process sentences in parallel batches
  const batchSize = 5;
  const batchCount = Math.ceil(sentences.length / batchSize);

  for (let batchIndex = 0; batchIndex < batchCount; batchIndex++) {
    const start = batchIndex * batchSize;
    const end = start + batchSize;
    const chunk = sentences.slice(start, end).join(' ').trim();

    if (!chunk) continue;

    // Handle special quotes more efficiently
    const normalizedChunk = chunk.replace(/<</g, ' ').replace(/>>/g, ' ');
    const cacheKey = md5(normalizedChunk);

    // Check for pending translations first
    if (pendingTranslations.has(cacheKey)) {
      console.log(`Waiting for existing translation: ${chunk.substring(0, 30)}...`);
      translatedChunks.push(await pendingTranslations.get(cacheKey));
      continue;
    }

    // Check cache
    const cached = await ReadSpeech({ lang: to, key: cacheKey });
    if (cached?.translate) {
      translatedChunks.push(cached.translate);
      continue;
    }

    // Create and store translation promise
    const translationPromise = translateChunk(normalizedChunk, from, to, cacheKey, quiz || cached?.quiz);
    pendingTranslations.set(cacheKey, translationPromise);
    translatedChunks.push(await translationPromise);
  }

  return translatedChunks.join(' ').trim();
}

// Extracted chunk translation logic
async function translateChunk(
  chunk: string,
  from: string,
  to: string,
  cacheKey: string,
  quiz: string
): Promise<string> {
  let provider = '';
  let result = chunk;
  const { modifiedString, quotedTexts } = preserveQuotedText(chunk);

  try {
    if (langs.includes(to)) {
      // Try DeepL first for supported languages
      result = await translate(modifiedString, to.toUpperCase(), from.toUpperCase());
      provider = 'deepl';
    } else {
      // Fallback to Google Translate via English pivot
      const enText = await translate(modifiedString, "EN");
      const translated = await translatex(enText, {
        from: "en",
        to,
        forceBatch: true,
        requestOptions: { agent: new HttpsProxyAgent('https://164.132.175.159:3128') },
      });
      result = translated.text;
      provider = 'google';
    }
  } catch (primaryError) {
    console.error('Primary translation failed, using fallback:', primaryError);
    try {
      const fallbackResult = await translatex(modifiedString, {
        from,
        to,
        forceBatch: true,
        requestOptions: { agent: new HttpsProxyAgent('https://164.132.175.159:3128') },
      });
      result = fallbackResult.text;
      provider = 'google-fallback';
    } catch (fallbackError) {
      console.error('Fallback translation failed:', fallbackError);
    }
  }

  // Restore quoted text if we modified it
  result = restoreQuotedText(result, quotedTexts);

  // Cache the result if needed
  if (quiz) {
    await WriteTranslate({
      lang: to,
      key: cacheKey,
      text: chunk,
      translate: result,
      provider,
      quiz
    });
  }

  // Clean up
  pendingTranslations.delete(cacheKey);
  return result;
}